version: 2.1
# Use a package of configuration called an orb.
orbs: 
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
   # Exercise - Rollback
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}

  install_aws_cli:
    steps:
      - run:
          name: install aws cli
          command: |
            sudo apt install curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo apt install unzip
            unzip awscliv2.zip
            sudo ./aws/install

# Define the jobs we want to run for this project
jobs:
  myjob1:  # Choose any name, such as `build`
      # The primary container, where your job's commands will run
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout # check out the code in the project directory
        - run: echo "hello world" # run the `echo` command

  create_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - run:
          name: add public ip of EC2 into inventory file
          command: |
            touch inventory
            echo [all] > inventory
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory
      - destroy_environment

  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["47:83:37:d0:c7:83:6f:55:06:8c:9b:11:6c:26:09:55"] 
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            # Your command
            ansible-playbook -i inventory main-remote.yml

      - destroy_environment

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      # - run: apk add --update curl
      - install_aws_cli
      - run:
          name: smoke test
          command: |
            # URL="https://blog.udacity.com/"
            # # Test if website exists
            # if curl -s --head ${URL} 
            # then
            #   return 0
            # else
            #   return 1
            # fi
            return 1
      - destroy_environment
# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      # - myjob1
      - create_infrastructure
      # - configure_infrastructure
      - smoke_test:
          requires:
            - create_infrastructure